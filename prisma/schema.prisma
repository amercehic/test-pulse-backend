generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TestRun {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String
  triggeredBy    String
  status         String          @default("queued") // queued, running, completed, cancelled
  duration       Float?
  commit         String
  branch         String
  framework      String
  browser        String
  browserVersion String
  platform       String
  testExecutions TestExecution[]

  @@index([status])
}

model Test {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  suite       String? // Optional grouping (e.g., 'Authentication')
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  executions  TestExecution[] @relation("TestExecutions")

  @@index([name])
}

model TestExecution {
  id            String    @id @default(uuid())
  testRunId     String
  testId        String
  attempt       Int       @default(1) // Tracks multiple attempts per test case
  status        String    @default("queued") // queued, running, passed, failed, skipped, cancelled
  duration      Float?
  logs          String?
  errorMessage  String?
  stackTrace    String?
  screenshotUrl String? // Optional screenshot storage
  videoUrl      String? // Optional video storage
  startedAt     DateTime?
  completedAt   DateTime?

  testRun TestRun @relation(fields: [testRunId], references: [id], onDelete: Cascade)
  test    Test    @relation("TestExecutions", fields: [testId], references: [id], onDelete: Cascade) // Explicit relation name

  @@index([status])
  @@index([testId, testRunId]) // Optimized lookup for test executions
}

model TestHistory {
  id       String  @id @default(uuid())
  name     String
  status   String
  duration Float?
  logs     String?
}

model Organization {
  id          String       @id @default(uuid())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  invitations Invitation[]
  users       User[]       @relation("OrganizationUsers")
}

model User {
  id             String           @id @default(uuid())
  firstName      String
  lastName       String
  email          String           @unique
  password       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  organizationId String
  organization   Organization     @relation("OrganizationUsers", fields: [organizationId], references: [id], onDelete: Cascade)
  permissions    UserPermission[] @relation("UserToPermissions")
  roles          UserRole[]       @relation("RoleToUsers")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  invitations Invitation[]     @relation("RoleToInvitations")
  permissions RolePermission[] @relation("RoleToPermissions")
  users       UserRole[]       @relation("RoleToUsers")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  roles RolePermission[] @relation("RoleToPermissions")
  users UserPermission[] @relation("UserToPermissions")
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  permission   Permission @relation("RoleToPermissions", fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation("RoleToPermissions", fields: [roleId], references: [id], onDelete: Cascade)
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String
  role   Role   @relation("RoleToUsers", fields: [roleId], references: [id], onDelete: Cascade)
  user   User   @relation("RoleToUsers", fields: [userId], references: [id], onDelete: Cascade)
}

model UserPermission {
  id           String     @id @default(uuid())
  userId       String
  permissionId String
  permission   Permission @relation("UserToPermissions", fields: [permissionId], references: [id], onDelete: Cascade)
  user         User       @relation("UserToPermissions", fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id             String   @id @default(uuid())
  email          String   @unique
  organizationId String
  roleId         String
  token          String   @unique
  status         String   @default("pending")
  expiresAt      DateTime
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role         Role         @relation("RoleToInvitations", fields: [roleId], references: [id], onDelete: Cascade)
}
